
List<Monkey> monkeys = new List<Monkey>();
ParseInput();

Part1();

monkeys = new List<Monkey>();
ParseInput();

Part2();

Console.WriteLine("end");
Console.ReadLine();


void ParseInput()
{
	var input = File.ReadAllLines("input.txt");

	int index = 0;
	while (index < input.Length)
	{
		Monkey monkey = new Monkey();
		index++;
		var items = input[index].Replace("  Starting items: ", "").Replace(" ", "").Split(',').Select(a => ulong.Parse(a)).ToArray();
		foreach (var item in items)
			monkey.Items.Enqueue(item);
		index++;
		var op = input[index].Replace("  Operation: new = old ", "").Split(" ");
		if (op[0] == "+")
		{
			if (op[1] == "old")
				monkey.Operation = 2;
			else
			{
				monkey.Operation = 0;
				monkey.Value = ulong.Parse(op[1]);
			}
		}
		else
		{
			if (op[1] == "old")
				monkey.Operation = 3;
			else
			{
				monkey.Operation = 1;
				monkey.Value = ulong.Parse(op[1]);
			}
		}
		index++;
		monkey.Test = ulong.Parse(input[index].Replace("  Test: divisible by ", ""));
		index++;
		monkey.IfTrue = int.Parse(input[index].Replace("    If true: throw to monkey ", ""));
		index++;
		monkey.IfFalse = int.Parse(input[index].Replace("    If false: throw to monkey ", ""));
		index++;
		monkeys.Add(monkey);
		index++;
	}
}


void Part1()
{	
	Console.WriteLine($"Part 1: {MonkeyBusiness(1, 20)}");
}


void Part2()
{
	Console.WriteLine($"Part 2: {MonkeyBusiness(2, 10000)}");
}


ulong MonkeyBusiness(int part, int rounds)
{
	ulong[] inspects = new ulong[monkeys.Count];

	ulong mod = 1;
	foreach (var monkey in monkeys)
		mod *= monkey.Test;

	for (int i = 1; i <= rounds; i++)
	{
		for (int j = 0; j < monkeys.Count; j++)
		{
			while (monkeys[j].Items.Count > 0)
			{
				inspects[j]++;

				ulong item = monkeys[j].Items.Dequeue();
				switch (monkeys[j].Operation)
				{
					case 0: // + val
						item += monkeys[j].Value;
						break;
					case 1: // * val
						item *= monkeys[j].Value;
						break;
					case 2: // + old
						item += item;
						break;
					case 3: // * old
						item *= item;
						break;
				}

				if (part == 1)
					item /= 3;
				else
					item %= mod;

				if (item % monkeys[j].Test == 0)
					monkeys[monkeys[j].IfTrue].Items.Enqueue(item);
				else
					monkeys[monkeys[j].IfFalse].Items.Enqueue(item);
			}
		}
	}

	var sorted = inspects.OrderByDescending(a => a).ToArray();
	return sorted[0] * sorted[1];
}


public class Monkey
{
	public Queue<ulong> Items { get; }
	public int Operation { get; set; } // 0 + val ; 1 * val ; 2 + old ; 3 * old
	public ulong Value { get; set; }
	public ulong Test { get; set; }
	public int IfTrue { get; set; }
	public int IfFalse { get; set; }

	public Monkey()
	{
		Items = new Queue<ulong>();
		Operation = -1;
		Value = 0;
		Test = 1;
		IfTrue = 0;
		IfFalse = 0;
	}
}