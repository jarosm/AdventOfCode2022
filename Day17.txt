
// Represent 7x4 rock as int
int MakeRock(byte a, byte b, byte c, byte d)
	  => (a << 24) | (b << 16) | (c << 8) | d;

// 7x4 Shapes
int[] rockShapes =
	{
	  MakeRock(
		0b0000000,
		0b0000000,
		0b0000000,
		0b0011110),
	  MakeRock(
		0b0000000,
		0b0001000,
		0b0011100,
		0b0001000),
	  MakeRock(
		0b0000000,
		0b0000100,
		0b0000100,
		0b0011100),
	  MakeRock(
		0b0010000,
		0b0010000,
		0b0010000,
		0b0010000),
	  MakeRock(
		0b0000000,
		0b0000000,
		0b0011000,
		0b0011000),
	};

// Get rock row by shifting
byte RockRow(int rock, int row)
	  => (byte)((rock >> ((3 - row) * 8)) & 0xFF);

// Overlap rock rows to get X min and max
byte RockExtent(int rock)
	  => (byte)(RockRow(rock, 0) | RockRow(rock, 1) | RockRow(rock, 2) | RockRow(rock, 3));

// Shift rock to right or left
int ShiftRock(int rock, bool right)
{
	int rockExtent = RockExtent(rock);
	if (right && (rockExtent & 1) == 0)
		return rock >> 1;
	else if (!right && (rockExtent & 0b1000000) == 0)
		return rock << 1;
	else
		return rock;
}

int NormalizeChamberHeight(List<byte> chamber)
{
	// All of our pieces are 4 units tall and we want 3 units of space between the bottom of a piece and the top of the current pile.
	while (chamber.Count < 3 + 4 || chamber[2 + 4] != 0)
		chamber.Insert(0, 0b0000000);

	// We've left 7 empty spaces above the bottom of the chamber, plus we have one extra floor space, so if we subtract 8 from the current chamber item count, we get our current height.
	return chamber.Count - 8;
}


Part1();

Part2();

Console.WriteLine("end");
Console.ReadLine();


string ParseInput()
{
	var input = File.ReadAllLines("input.txt")[0];

	return input;
}


void Part1()
{
	var input = ParseInput();

	int jetIndex = 0;
	int rockShapeIndex = 0;
	long targetRockFallIndex = 2022; // Total rocks

	// Chamber with floor
	List<byte> chamber = new List<byte>(new byte[] { 0b1111111 });

	for (long rockFallIndex = 0; rockFallIndex < targetRockFallIndex; rockFallIndex++)
	{
		NormalizeChamberHeight(chamber);

		int shape = rockShapes[rockShapeIndex];
		int y = 0;

		while (true)
		{
			bool shiftRight = (input[jetIndex] == '>');
			jetIndex = (jetIndex + 1) % input.Length;

			// Shift to side
			int shiftedShape = ShiftRock(shape, shiftRight);

			bool overlap = new int[] { 0, 1, 2, 3 }.Aggregate(0, (overlapBits, row) => overlapBits | (RockRow(shiftedShape, row) & chamber[y + row])) != 0;

			if (!overlap)
				shape = shiftedShape;

			// Drop
			overlap = new int[] { 0, 1, 2, 3 }.Aggregate(0, (overlapBits, row) => overlapBits | (RockRow(shape, row) & chamber[y + 1 + row])) != 0;

			if (overlap)
			{
				// We hit the bottom, so rather than move downward, we'll commit our stone into the grid and return
				for (int r = 0; r < 4; r++)
				{
					var row = RockRow(shape, r);
					chamber[y + r] |= row;
				}
				break;
			}

			y++;
		}

		rockShapeIndex = (rockShapeIndex + 1) % rockShapes.Length;
	}

	int height = NormalizeChamberHeight(chamber);

	Console.WriteLine($"Part 1: {height}");
}


void Part2()
{
	var input = ParseInput();

	int jetIndex = 0;
	int rockShapeIndex = 0;
	long targetRockFallIndex = 1_000_000_000_000; // Total rocks

	// Bottom/repeat/modulo are the three sections of our measurement.
	// Bottom is "how many rocks/how much height before our first measured repetition section"
	// Repeat is "how many rocks/how much height in the repeated section"
	// Modulo is "how much height after the repeated section
	int bottomHeight = 0;
	long bottomRockCount = 0;
	int repeatHeight = 0;
	long repeatRockCount = 0;
	int moduloHeight = 0;

	// Chamber with floor
	List<byte> chamber = new List<byte>(new byte[] { 0b1111111 });

	// When searching for our repeat counts, we use the set to look for known jet index values and then set repeatJetIndex once we get a duplicate.
	int? repeatJetIndex = null;
	var jetIndexSet = new HashSet<int>();

	for (long rockFallIndex = 0; rockFallIndex < targetRockFallIndex; rockFallIndex++)
	{
		NormalizeChamberHeight(chamber);

		int shape = rockShapes[rockShapeIndex];
		int y = 0;

		bool jetWrapped = false;
		while (true)
		{
			bool shiftRight = (input[jetIndex] == '>');
			jetIndex = (jetIndex + 1) % input.Length;
			if (jetIndex == 0)
				jetWrapped = true;

			// Shift to side
			int shiftedShape = ShiftRock(shape, shiftRight);

			bool overlap = new int[] { 0, 1, 2, 3 }.Aggregate(0, (overlapBits, row) => overlapBits | (RockRow(shiftedShape, row) & chamber[y + row])) != 0;

			if (!overlap)
				shape = shiftedShape;

			// Drop
			overlap = new int[] { 0, 1, 2, 3 }.Aggregate(0, (overlapBits, row) => overlapBits | (RockRow(shape, row) & chamber[y + 1 + row])) != 0;

			if (overlap)
			{
				// We hit the bottom, so rather than move downward, we'll commit our stone into the grid and return
				for (int r = 0; r < 4; r++)
				{
					var row = RockRow(shape, r);
					chamber[y + r] |= row;
				}
				break;
			}

			y++;
		}

		rockShapeIndex = (rockShapeIndex + 1) % rockShapes.Length;

		if (jetWrapped && rockShapeIndex == 1) // !! rockShapeIndex is different for different solutions
		{
			if (repeatJetIndex == null)
			{
				// We haven't found our repeat index yet so test to see, if this is it or we need to keep searching
				if (jetIndexSet.Contains(jetIndex))
				{
					// Found it! We now know how tall the bottom section of our pattern is (i.e. the bit before the repeated pattern starts)
					bottomHeight = NormalizeChamberHeight(chamber);
					bottomRockCount = rockFallIndex;
					repeatJetIndex = jetIndex;
				}
				else
				{
					// We haven't seen this index yet so add it into the set.
					jetIndexSet.Add(jetIndex);
				}
			}
			else if (jetIndex == repeatJetIndex)
			{
				// We've now measured a full repeat of our jet indices, and we know how much height/rock count accumulates each time.
				// Now we can use some modulo math to figure out how many rocks off from the repeat our final rock count will be (so we can measure how much height is in the interrupted final section)
				repeatHeight = NormalizeChamberHeight(chamber) - bottomHeight;
				repeatRockCount = rockFallIndex - bottomRockCount;

				targetRockFallIndex = rockFallIndex + (1_000_000_000_000 - bottomRockCount) % repeatRockCount;
			}
		}
	}

	// We hit our target so the last bit of height is whatever we added since the end of the repeat section
	moduloHeight = NormalizeChamberHeight(chamber) - bottomHeight - repeatHeight;

	// How many repeats to we need between the bottom and the top section?
	var repeatCount = (repeatRockCount > 0) ? ((1_000_000_000_000 - bottomRockCount) / repeatRockCount) : 0;

	long height = bottomHeight + repeatCount * repeatHeight + moduloHeight;

	Console.WriteLine($"Part 2: {height}");
}